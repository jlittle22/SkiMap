
░██████╗██╗░░██╗██╗███╗░░░███╗░█████╗░██████╗░
██╔════╝██║░██╔╝██║████╗░████║██╔══██╗██╔══██╗     
╚█████╗░█████═╝░██║██╔████╔██║███████║██████╔╝
░╚═══██╗██╔═██╗░██║██║╚██╔╝██║██╔══██║██╔═══╝░
██████╔╝██║░╚██╗██║██║░╚═╝░██║██║░░██║██║░░░░░
╚═════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░░░░

***********************************
* README file for SkiMap Project  *
* John Little                     *
*                                 *
* Also first Vim-edited file lol. *
*                                 *
***********************************

(!)STILL IN DEVELOPMENT(!)

--INTRODUCTION------------------------------------------------------------------

Abstract Goal: 
	Read in graph data representing a ski resort. Accept user preferences
	and report a random path up and back down the mountain that meets as 
	many of their preferences as possible. 

Abstract Description:
	User preferences are logged as flags in an 8-bit field which is passed to
	the driver. The driver reads in data from two files containing Vertex and 
	Edge information, loads it into objects, and initializes a SkiMap object
	(a graph). The SkiMap module uses a modified Bellman-Ford algorithm to 
	determine the path that most-closely matches the users preferences, free
	of biases regarding the length of the path. 

To-Be-Implemented:
    * Being able to produce the top 3 paths based on search parameters so that
      users can explore new paths
    * Cycle through top paths for a certain set of preferences for the same
      input doesn't generate the same answer every time.

Testing Hit List:
	* Algorithm punishing paths w/ hard trails.
	* Make a bigger mountain representation for testing. 
	
--OBJECTS-----------------------------------------------------------------------

Edges (Edge.h/Edge.c):
	In this project, an Edge object abstractly represents a ski trail. Edges 
	are structs with some "member" functions. The first and most basic data 
	member of an Edge struct is a char array of a defined size representing the 
	trail's name. An Edge also contains a pointer to a Vertex which represents 
	the edge's destination. Edges can only be one-directional and the Edge 
	object does not store the source Vertex of the edge. Edge objects also 
	contain a single byte whose bits represent 8 flags that are defined in the 
	Edge.h file. These flags represent various characteristics of a trail (e.g.
	black diamond, blue square, glades, moguls, etc).

	struct Edge{
		char edgeName[EDGE_NAME_CHAR_COUNT];
    	uint8_t diffRating;
    	Vertex destination;  
	};


Vertices (Vertex.h/Vertex.c):
	Vertices represent intersections and endpoints of trails on a ski mountain.
	Vertices are structs that come with significantly more member functions 
	than the Edge objects do. Like Edges, they also contain a char array 
	representing the Vertex name (also of a predetermined size). Vertices also
	contain a single byte for data storage inside which is a flag marking if 
	the Vertex has been discovered during traversal and the Vertex's 
	classification. A Vertex can be classified as either: an OFFLOAD point, 
	and ONLOAD point, or an INTERSECTION. The distinction is important for
	finding bottom-of-mountain -> top-of-mountain -> bottom-of-mountain paths.
	NOTE: while the discovered property is stored as a single bit flag, the 
	Vertex classification is stored as the value of the 2 least significant 
	bits in the data byte, NOT as flags. Finally, a Vertex contains a List of
	all its Edges. 

	struct Vertex{
		char vertexName[VERT_NAME_CHAR_COUNT];
		uint8_t data;
		List edges; 
	}; 



Linked Lists (LinkedList.h/LinkedList.c) *NEEDS WORK:
	Linked Lists (syntically called Lists) are a polymorphic data structure 
	(Richard and Megan would be proud) that contain a LinkedList object and a 
	counter for the number of elements in the object. *Sadly, this was the first 
	object I made so I have some unnecessary structs. You get the idea though. 
	I'll redo it at some point.
	
	typedef struct Node{
		void * data; 
		Node * next; 
	} Node;
	
	struct LinkedList{
	    Node * front;
	};
	
	typedef struct LinkedList* LinkedList; 
	
	struct LinkedListClass{
		LinkedList list;
		int numElems; 
	};


Ski Maps (SkiMap.h/SkiMap.c) *NEEDS WORK:
	*This is an incomplete module. SkiMap objects contain a name string, a List 
	of vertices, as well as another List of startPoints. The start points are 
	all the Vertices in the structure that are tagged as ONLOAD points (chair 
	lifts sources). This SkiMap object will be what our soon-to-be-created 
	searching algorithms will traverse through. The SkiMap object is the graph!!

	struct SkiMap{
		char mtnName[MTN_NAME_SIZE];
		List allVertices; 
		List startPoints;
	};

Min Heaps (MinHeap.h/MinHeap.c):
	MinHeaps are standard dynamic arrays fitted with expansion when the current
	array is full as well as recursive heapifications upon on deletion or 
	insertion.

--ALGORITHMS--------------------------------------------------------------------

Bellman-Ford Algorithm:
	*https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm
	My implementation of the Bellman-Ford algorithm is the same as documented
	in the link above with the modification that instead of using path weights
	to relax an edge, I use what the average path edge weight be versus what 
	it would be without an inspected edge. This means that instead of
	minimizing distance from the source, this algorithm minimizes the average
	edge weight on the path. 

SmallFloat (Float Compression by John Little):
	Compresses a standard IEEE Floating point value (which is 32 bits) into a 28
	bit field with minimal loss of precision (accuracy was so high that it
	couldn't be accurately represented as a percent even using double precision
	floats). This conserves 4 bits of space (4 / 32 = 12.5% reduction) but in
	practice actually saves 8 *bytes* due to the size of a Vertex object. A 
	Vertex object (the object to which a Vertex points to) is presently 32 bytes
	large, meaning that even the small additional use of memory that a new
	float data member would occupy, would increase the structure size to 40
	(accounting for struct padding). 

--STRUCTURE---------------------------------------------------------------------
		    Ski Map       <- Highest Level. Represents Graph structure.
                       |     
                 Vertices List    
                   / / | \ \ 
                  V V  V  V V     <- Vertices inside the graph.
                  | |  |  | |
                 VertexObjects
                   ____|____
                  / /  |  \ \
                  E E  E  E E     <- Edges inside of each vertex.
                       |
                  Edge Objects
                       |
              Destination(Vertex) <- Desintation of Edge represented by Vertex.

--INPUT FILES-------------------------------------------------------------------
	See "basic.edata" for example of input EDGE DATA to the SkiMap object.
	See "basic.vdata" for example of input VERTEX DATA to the SkiMap ojbject.

	(!)IMPORTANT NOTES: 
		*Make sure there is NOT a blank line at the end of your inputs file --> 
		 leads to a bug that I havent fixed where edges vertices are entered in 
		 twice/will probably trigger an assertion somewhere... I don't really 
		 know. 
		*Right now, names CANNOT be space separated. You can use any other kind 
		 of delimeter (e.g. ChairLift, Chair_Lift, etc).

	EDGE DATA Syntax:

LINE: [SourceName] [DestinationName] [EdgeName] {flags seprated by spaces}

EXAMPLE: Lift Top CharLift 7 2 5

	VERTEX DATA Syntax:

LINE: [VertexName] [VertexClassification]

EXAMPLE: Lift 1

